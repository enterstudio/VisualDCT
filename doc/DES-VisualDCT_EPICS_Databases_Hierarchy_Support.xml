<?xml version="1.0" encoding="UTF-8"?>

<?xml-stylesheet type="text/xsl" href="..\..\Common\Documentation\Normal.xsl"?>

<cosydoc xmlns="urn:schemas-cosylab-com:Document">
	<head>
		<title>VisualDCT EPICS Databases Hierarchy Support</title>
		
		<info file="DES-VisualDCT_EPICS_Databases_Hierarchy_Support"
			  url="http://visualdct.cosylab.com/builds/VisualDCT"
			  class="des"
			  year="2002"
			  id="XX"
			  confidentiality="public"
			  project="VisualDCT"/>
			  
		<contributor name="Andrew Johnson"
				id="ajohnson"
				email="anj@aps.anl.gov"/>

		<contributor name="John Maclean"
				id="jmaclean"
				email="jfm@aps.anl.gov"/>

		<contributor name="Matej Sekoranja"
				id="msekoranja"
				email="matej.sekoranja@cosylab.com"/>

		<modification version="1.0" by="msekoranja" date="2002-08-20">
			<section>Created from the document written by A. Johnson and J. Maclean.</section>
		</modification>

		<scope>
			This document is presents a new EPICS databases hierarchy mechanism used by VisualDCT and it is a proposal for EPICS database model for Base R3.15 and later.
			<p>
			The document is based on discussion between Andrew Johnson, John Maclean and Matej Sekoranja.
			</p>
		</scope>
		
		<audience>
			The audience of this document are all EPICS DB developers and users.
		</audience>
		
		<reference id="visualdct"
			   title="VisualDCT Project"
			   href="http://visuladct.cosylab.com/"
			   author="Matej Sekoranja"
			   date="2002"
			   publisher="Cosylab, Ltd."
			   revision="2.2.1236"/>

	</head>
	
	<body>
		<section id="intro" title="Introduction">
			<p>
				The current EPICS template substitution mechanism is very restricted in its
				capabilities.  It requires two input files (.<f>template</f> and <f>.substitutions</f>) that
				have radically different syntaxes, and it only allows macros to be passed
				downwards into a template instance.  Hierarchical templates as implemented by
				VisualDCT must allow macro values to be passed into the template instance (giving
				values for fields within the expanded template), and values to be exported from
				the template instance to the higher level (usually the destination field name
				for a link in a record defined in the higher level <f>.vdb</f> file).
			</p>
		</section>
		
		<section id="syntax" title="New Syntax">
			<p>
				We propose adding two statements to the database file format and modifying the
				macro naming syntax slightly to implement true hierarchical behaviour.  Macros
				are defined in an <kwd>expand</kwd> statement and pass information into a template; ports
				are a kind of macro defined in a <kwd>template</kwd> statement that pass information
				upwards out of a template instance to their calling database.  Here's an
				example of a top-level file using the proposed syntax:
			</p>
			<code language="EPICS DB" id="template_example">
			  <desc>Simple database with new expansion syntax.</desc><![CDATA[
	record(calc,"slide1:error") {
	  field(INPA, "$(slmot1.position)")
	  ...
	}
	
	expand("slideMotor.vdb", slmot1) {
	  macro(name, "sm1")
	  macro(address, "4")
	  macro(demand, "slide1:demand.VAL")
	}
	
	record(ao,"slide1:speed") {
	  field(OUTP, "$(slmot1.speed)")
	  field(DTYP, "Soft Channel")
	  ...
	}]]>
			</code>
			<p>
				Note that we're using the macro syntax <kwd>$(template_instance_name.port_name)</kwd> to
				bring port values from the template instance into the higher level diagram. 
				Unfortunately we have to allow port macros to be used before the related expand
				statement appears in the parent <f>.vdb</f> file, so the database flattening tool will
				have to make two passes through the data and should also detect loops in
				port/macro definitions.
			</p>
			<p>
				When performing macro substitutions within strings, if a macro name is
				undefined the macro name and its surrounding <kwd>$()</kwd> characters will be left
				unchanged in the flat <f>.db</f> file.  This allows templates to be used when creating
				a database that still takes macro arguments on loading with <kwd>dbLoadRecords()</kwd>. 
				For undefined port macros though an error should probably be reported instead
				(but remember that these can't be properly checked and substituted until all
				<kwd>expand</kwd> statements and their related templates have been read in).
			</p>
			<p>
				Inside the template file <f>slideMotor.vdb</f>, we can define ports using the new
				<kwd>template</kwd> statement. Ports are usually going to contain <kwd>record.field</kwd> names, but
				they can be literal strings and may use macros in their value:
			</p>
			<code language="EPICS DB" id="slideMotor.vdb">
			  <desc>slideMotor.vdb database with new template block.</desc><![CDATA[
	template("Description of the Slide Motor template...") {
	  port(speed, "$(name):speed.VAL", "Record to set motor speed mm/sec")
	  port(go, "$(name):startmoving", "Forward link to this to cause movement")
	  port(position, "$(motor.position)", "Current position of the slide")
	  port(greet, "Hello, world!", "Just being friendly...")
	}
	record(ai, "$(name):speed") {
	  ...
	}
	record(ai, "$(name):dest") {
	  field(INP, "$(demand)")
	  ...
	}
	record(calc, "$(name):startmoving") {
	  ...
	}
	expand("motor.vdb", motor) {
	  macro(address, "$(address)")
	  ...
	}]]>
			</code>
			<p>
				Note that a <kwd>template</kwd> statement is optional; if a template file doesn't need to
				export any data to its parent it doesn't have to have one. The string argument
				provides a place for the user to put some descriptive text. Multiple template
				statements are allowed, although only the first description string will be
				used.  If a port name is repeated either within a single <kwd>template</kwd> statement or
				in subsequent ones, only the first definition is used - later redefinitions
				will be ignored.  An empty <kwd>template</kwd> statement may also be used if desired to
				document this database as a template, and would look like this (the parentheses
				and braces are required if the <kwd>template</kwd> keyword is present):
			</p>
			<code language="EPICS DB" id="template_empty">
			  <![CDATA[	template () {}]]>
			</code>
			<p>
				Similarly an <kwd>expand</kwd> statement doesn't have to define any macros, but the braces
				are still mandatory:
			</p>
			<code language="EPICS DB" id="expand_example">
			  <![CDATA[	expand ("subsys.vdb", ss) {}]]>
			</code>
			<p>
				There are a couple of interesting and subtle differences between the above
				empty <kwd>expand</kwd> statemend and the statement:
			</p>
			<code language="EPICS DB" id="include_example">
			  <![CDATA[	include "subsys.vdb"]]>
			</code>
			<p>
				There may be circumstances where a template designer might use an <kwd>include</kwd>
				statement rather than an <kwd>expand</kwd> statement. If the <f>subsys.vdb</f> file defines some
				port values for the parent to use, the expand statement makes those port values
				available within this <f>.db</f> file as <kwd>$(ss.port_name)</kwd>.  Using an include statement
				those port values will be made available to the parent <f>.db</f> file instead.  Also
				an <kwd>expand</kwd> statement with no macro definitions will not pass any macro values to
				the <f>subsys.vdb</f> file, whereas by using an include statement the <f>subsys.vdb</f> file
				will have full access to all the macros defined by the parent for use in this
				<f>.db</f> file.

				Thus an include statement is useful where there are a collection of related
				templates that a designer wishes to combine into a single template without
				having to instantiate each one separately and pass a common set of macros into.
			</p>
		</section>
		
		<section id="flattening" title="Flattening Template Hierarchies">
			<p>
				VisualDCT will be the first tool that is capable of flattening this new database
				hierarchy syntax (<kwd>capFast</kwd> designs have always had similar hierarchical template
				capabilities), although at least one other will be produced in Base R3.15 for
				use with <kwd>gnumake</kwd>.  The flattening process involves expanding all templates and
				replacing the macro and port macro variables with their strings.  If a macro
				name is found that has no definition within its scope, it will be left exactly
				as it was found, which allows load-time macros to be used.  We also strongly
				recommend that flattening tools mark the beginning and end of each template
				file in the flat database file using a comment as follows, to provide a way for
				other tools to refer back to the original template from the flat file:
			</p>
			<code language="EPICS DB" id="flatten_db">
			  <desc>An example of flatten DB.</desc><![CDATA[
	  # expand("/full/path/to/template.vdb", instance_name)

	  ... expanded contents of template.vdb

	  # end (instance_name)]]>
			</code>
			<p>
				Note that templates that expand other sub-templates should nest as appropriate,
				but this implies that the flattening tool (Road-roller? Steam-iron?) must
				maintain the nesting properly in the output.
			</p>
		</section>

		<section id="EBNFG" title="Extended Backus Naur Form Grammar">
			<p>
				Space, tab and newline characters are permitted and ignored between most
				of the tokens below, other than inside a macro name or string.
			</p>
			<p>
			<code language="text" id="EBNFG_review">
			  <desc>A short review of EBNFG.</desc><![CDATA[
	? means the token preceeding is allowed 0 or 1 times
	* means the token preceeding is allowed 0 or more times
	+ means the token preceeding is allowed 1 or more times
	.. signifies the end of a definition.
			]]>
			</code>
			</p>
			<code language="EBNFG" id="EBNFG_syntax">
			  <desc>An EBNFG syntax of new keywords.</desc><![CDATA[
	macronamechar = [a-zA-Z0-9_:-] .
	macroname_definition = macronamechar+ |
		'"' macronamechar+ '"' .

	macro_expansion = '$(' macronamechar+ ')' .
	port_expansion = '$(' macronamechar+ '.' macronamechar+ ')' .

	string_element = [^"] | '\"' | macro_expansion | port_expansion .
	quotedstring = '"' string_element* '"' .

	string = macronamechar+ |
		quotedstring .

	noteol = [^\n] .
	comment = '#' noteol* .


	macro_definition = comment |
		('macro' '(' macroname_definition ',' string ')') .

	expand = 'expand' '(' quotedstring ',' macroname_definition ')'
		'{' macro_definition* '}' .


	port_definition = comment |
		('port' '(' macroname_definition ',' string ( ',' quotedstring)? ')') .

	template = 'template' '(' quotedstring? ')'
		'{' port_definition* '}' .
]]>
			</code>

		</section>

	</body>
</cosydoc>