package com.cosylab.vdct;

import java.awt.*;
import javax.swing.*;
/**
 * This type was generated by a SmartGuide.
 */
public class VisualDCTAboutBox extends JDialog {
	private JLabel ivjAppName = null;
	private JPanel ivjButtonPane = null;
	private JLabel ivjCopyright = null;
	IvjEventHandler ivjEventHandler = new IvjEventHandler();
	private JPanel ivjIconPane = null;
	private JPanel ivjJDialogContentPane = null;
	private JButton ivjOkButton = null;
	private JPanel ivjTextPane = null;
	private GridLayout ivjTextPaneGridLayout = null;
	private JLabel ivjUserName = null;
	private JLabel ivjVersion = null;
	private JLabel ivjBottomSpacer = null;
	private JLabel ivjBuildVer = null;
	private JLabel ivjTopSpacer = null;
	private JLabel ivjMiddleSpacer = null;

class IvjEventHandler implements java.awt.event.ActionListener {
		public void actionPerformed(java.awt.event.ActionEvent e) {
			if (e.getSource() == VisualDCTAboutBox.this.getOkButton()) 
				connEtoM1(e);
		};
	};
/**
 * VisualDCTAboutBox constructor comment.
 */
public VisualDCTAboutBox() {
	super();
	initialize();
}
/**
 * VisualDCTAboutBox constructor comment.
 * @param owner java.awt.Dialog
 */
public VisualDCTAboutBox(Dialog owner) {
	super(owner);
}
/**
 * VisualDCTAboutBox constructor comment.
 * @param owner java.awt.Dialog
 * @param title java.lang.String
 */
public VisualDCTAboutBox(Dialog owner, String title) {
	super(owner, title);
}
/**
 * VisualDCTAboutBox constructor comment.
 * @param owner java.awt.Dialog
 * @param title java.lang.String
 * @param modal boolean
 */
public VisualDCTAboutBox(Dialog owner, String title, boolean modal) {
	super(owner, title, modal);
}
/**
 * VisualDCTAboutBox constructor comment.
 * @param owner java.awt.Dialog
 * @param modal boolean
 */
public VisualDCTAboutBox(Dialog owner, boolean modal) {
	super(owner, modal);
}
/**
 * VisualDCTAboutBox constructor comment.
 * @param owner java.awt.Frame
 */
public VisualDCTAboutBox(Frame owner) {
	super(owner);
}
/**
 * VisualDCTAboutBox constructor comment.
 * @param owner java.awt.Frame
 * @param title java.lang.String
 */
public VisualDCTAboutBox(Frame owner, String title) {
	super(owner, title);
}
/**
 * VisualDCTAboutBox constructor comment.
 * @param owner java.awt.Frame
 * @param title java.lang.String
 * @param modal boolean
 */
public VisualDCTAboutBox(Frame owner, String title, boolean modal) {
	super(owner, title, modal);
}
/**
 * VisualDCTAboutBox constructor comment.
 * @param owner java.awt.Frame
 * @param modal boolean
 */
public VisualDCTAboutBox(Frame owner, boolean modal) {
	super(owner, modal);
}
/**
 * connEtoM1:  (OkButton.action.actionPerformed(java.awt.event.ActionEvent) --> VisualDCTAboutBox.dispose()V)
 * @param arg1 java.awt.event.ActionEvent
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void connEtoM1(java.awt.event.ActionEvent arg1) {
	try {
		// user code begin {1}
		// user code end
		this.dispose();
		// user code begin {2}
		// user code end
	} catch (java.lang.Throwable ivjExc) {
		// user code begin {3}
		// user code end
		handleException(ivjExc);
	}
}
/**
 * Return the AppName property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getAppName() {
	if (ivjAppName == null) {
		try {
			ivjAppName = new javax.swing.JLabel();
			ivjAppName.setName("AppName");
			ivjAppName.setFont(new java.awt.Font("Arial", 2, 18));
			ivjAppName.setText("Visual DCT for Java");
			ivjAppName.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
			ivjAppName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjAppName;
}
/**
 * Return the BottomSpacer property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getBottomSpacer() {
	if (ivjBottomSpacer == null) {
		try {
			ivjBottomSpacer = new javax.swing.JLabel();
			ivjBottomSpacer.setName("BottomSpacer");
			ivjBottomSpacer.setText("");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjBottomSpacer;
}
/**
 * Return the Spacer property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getBuildVer() {
	if (ivjBuildVer == null) {
		try {
			ivjBuildVer = new javax.swing.JLabel();
			ivjBuildVer.setName("BuildVer");
			ivjBuildVer.setText("build");
			ivjBuildVer.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
			ivjBuildVer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
			ivjBuildVer.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
			// user code begin {1}
			ivjBuildVer.setText(ivjBuildVer.getText()+" "+Version.BUILD);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjBuildVer;
}
/**
 * Return the ButtonPane property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getButtonPane() {
	if (ivjButtonPane == null) {
		try {
			ivjButtonPane = new javax.swing.JPanel();
			ivjButtonPane.setName("ButtonPane");
			ivjButtonPane.setLayout(new java.awt.FlowLayout());
			getButtonPane().add(getOkButton(), getOkButton().getName());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjButtonPane;
}
/**
 * Return the Copyright property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getCopyright() {
	if (ivjCopyright == null) {
		try {
			ivjCopyright = new javax.swing.JLabel();
			ivjCopyright.setName("Copyright");
			ivjCopyright.setText("© Copyright SLS (PSI), Switzerland, 1999-2001");
			ivjCopyright.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
			ivjCopyright.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjCopyright;
}
/**
 * Return the IconPane property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getIconPane() {
	if (ivjIconPane == null) {
		try {
			ivjIconPane = new javax.swing.JPanel();
			ivjIconPane.setName("IconPane");
			ivjIconPane.setLayout(new java.awt.BorderLayout());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjIconPane;
}
/**
 * Return the JDialogContentPane property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getJDialogContentPane() {
	if (ivjJDialogContentPane == null) {
		try {
			ivjJDialogContentPane = new javax.swing.JPanel();
			ivjJDialogContentPane.setName("JDialogContentPane");
			ivjJDialogContentPane.setLayout(new java.awt.BorderLayout());
			getJDialogContentPane().add(getButtonPane(), "South");
			getJDialogContentPane().add(getTextPane(), "Center");
			getJDialogContentPane().add(getIconPane(), "West");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjJDialogContentPane;
}
/**
 * Return the MiddleSpacer property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getMiddleSpacer() {
	if (ivjMiddleSpacer == null) {
		try {
			ivjMiddleSpacer = new javax.swing.JLabel();
			ivjMiddleSpacer.setName("MiddleSpacer");
			ivjMiddleSpacer.setText("");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjMiddleSpacer;
}
/**
 * Return the OkButton property value.
 * @return javax.swing.JButton
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JButton getOkButton() {
	if (ivjOkButton == null) {
		try {
			ivjOkButton = new javax.swing.JButton();
			ivjOkButton.setName("OkButton");
			ivjOkButton.setPreferredSize(new java.awt.Dimension(68, 27));
			ivjOkButton.setText("OK");
			ivjOkButton.setMinimumSize(new java.awt.Dimension(68, 27));
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjOkButton;
}
/**
 * Return the TextPane property value.
 * @return javax.swing.JPanel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JPanel getTextPane() {
	if (ivjTextPane == null) {
		try {
			ivjTextPane = new javax.swing.JPanel();
			ivjTextPane.setName("TextPane");
			ivjTextPane.setLayout(getTextPaneGridLayout());
			getTextPane().add(getTopSpacer(), getTopSpacer().getName());
			getTextPane().add(getAppName(), getAppName().getName());
			getTextPane().add(getVersion(), getVersion().getName());
			getTextPane().add(getBuildVer(), getBuildVer().getName());
			getTextPane().add(getMiddleSpacer(), getMiddleSpacer().getName());
			getTextPane().add(getCopyright(), getCopyright().getName());
			getTextPane().add(getUserName(), getUserName().getName());
			getTextPane().add(getBottomSpacer(), getBottomSpacer().getName());
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTextPane;
}
/**
 * Return the TextPaneGridLayout property value.
 * @return java.awt.GridLayout
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private java.awt.GridLayout getTextPaneGridLayout() {
	java.awt.GridLayout ivjTextPaneGridLayout = null;
	try {
		/* Create part */
		ivjTextPaneGridLayout = new java.awt.GridLayout(8, 1);
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	};
	return ivjTextPaneGridLayout;
}
/**
 * Return the TopSpacer property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getTopSpacer() {
	if (ivjTopSpacer == null) {
		try {
			ivjTopSpacer = new javax.swing.JLabel();
			ivjTopSpacer.setName("TopSpacer");
			ivjTopSpacer.setText("");
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjTopSpacer;
}
/**
 * Return the UserName property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getUserName() {
	if (ivjUserName == null) {
		try {
			ivjUserName = new javax.swing.JLabel();
			ivjUserName.setName("UserName");
			ivjUserName.setText("by Matej Sekoranja (matej.sekoranja@ijs.si)");
			ivjUserName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
			ivjUserName.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
			// user code begin {1}
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjUserName;
}
/**
 * Return the Version property value.
 * @return javax.swing.JLabel
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private javax.swing.JLabel getVersion() {
	if (ivjVersion == null) {
		try {
			ivjVersion = new javax.swing.JLabel();
			ivjVersion.setName("Version");
			ivjVersion.setText("Version");
			ivjVersion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
			ivjVersion.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
			// user code begin {1}
			ivjVersion.setText(ivjVersion.getText()+" "+Version.VERSION);
			// user code end
		} catch (java.lang.Throwable ivjExc) {
			// user code begin {2}
			// user code end
			handleException(ivjExc);
		}
	}
	return ivjVersion;
}
/**
 * Called whenever the part throws an exception.
 * @param exception java.lang.Throwable
 */
private void handleException(java.lang.Throwable exception) {
	System.out.println("--------- UNCAUGHT EXCEPTION ---------");
	exception.printStackTrace(System.out);
}
/**
 * Initializes connections
 * @exception java.lang.Exception The exception description.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initConnections() throws java.lang.Exception {
	// user code begin {1}
	// user code end
	getOkButton().addActionListener(ivjEventHandler);
}
/**
 * Initialize the class.
 */
/* WARNING: THIS METHOD WILL BE REGENERATED. */
private void initialize() {
	try {
		// user code begin {1}
		// user code end
		setName("VisualDCTAboutBox");
		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		setSize(418, 251);
		setTitle("About Visual DCT");
		setContentPane(getJDialogContentPane());
		initConnections();
	} catch (java.lang.Throwable ivjExc) {
		handleException(ivjExc);
	}
	// user code begin {2}
	// user code end
}
/**
 * main entrypoint - starts the part when it is run as an application
 * @param args java.lang.String[]
 */
public static void main(java.lang.String[] args) {
	try {
		VisualDCTAboutBox aVisualDCTAboutBox;
		aVisualDCTAboutBox = new VisualDCTAboutBox();
		aVisualDCTAboutBox.setModal(true);
		aVisualDCTAboutBox.addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent e) {
				System.exit(0);
			};
		});
		aVisualDCTAboutBox.show();
		java.awt.Insets insets = aVisualDCTAboutBox.getInsets();
		aVisualDCTAboutBox.setSize(aVisualDCTAboutBox.getWidth() + insets.left + insets.right, aVisualDCTAboutBox.getHeight() + insets.top + insets.bottom);
		aVisualDCTAboutBox.setVisible(true);
	} catch (Throwable exception) {
		System.err.println("Exception occurred in main() of javax.swing.JDialog");
		exception.printStackTrace(System.out);
	}
}
}
